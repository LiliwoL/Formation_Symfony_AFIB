<?php

namespace GeoBundle\Repository;

use CrEOF\Spatial\PHP\Types\Geography\Polygon;

/**
 * BibliothequeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BibliothequeRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * Methode spécifique pour récupérer toutes les BIBLIOTHEQUES se situant à l'intérieur du POLYGONE $area
	 *
	 * @param Polygon $area
	 * @return array
	 */
	public function getBibliothequesFromArea( Polygon $area )
	{
		// SELECT * FROM bibliotheque AS b WHERE MBRContains( GeomFromText('Polygon((28 28,35 28,35 35,28 35,28 28))'), b.Coords )


		$rawSql = "
				SELECT b.Nom, ST_AsText( b.Coords ) As Coords 
				FROM bibliotheque AS b 
				WHERE MBRContains( GeomFromText('Polygon( $area )'), b.Coords )";



		$stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
		$stmt->execute([]);


		return $stmt->fetchAll();
	}


	/**
	 * Methode spécifique pour récupérer toutes les BIBLIOTHEQUES et les LIVRES qu'elles contiennent
	 * se situant à l'intérieur du POLYGONE $area
	 *
	 * @param Polygon $area
	 * @return array
	 */
	public function getBibliothequesAndTheirBooksFromArea( Polygon $area )
	{
		// SELECT * FROM bibliotheque AS g WHERE MBRContains( GeomFromText('Polygon((28 28,35 28,35 35,28 35,28 28))'), g.Coords )


		/**
		 * Attention, ici on fait une JOINTURE entre deux BASES
		 *
		 * Pour que cela fonctionne, il faut les droits SELECT de l'entity manager sur l'autre base
		 */
		$rawSql = "
				SELECT b.Nom, ST_AsText( b.Coords ) As Coords, l.*
				FROM bibliotheque AS b 
				LEFT JOIN BIBLIO.livre AS l ON l.bibliotheque_id = b.id 
				WHERE MBRContains( GeomFromText('Polygon( $area )'), b.Coords )";



		$stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
		$stmt->execute([]);


		return $stmt->fetchAll();
	}
}
